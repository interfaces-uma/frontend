import Button from "@/components/Button";
import BackIcon from "@/components/Icons/IconBack";
import { useEffect, useState, type ReactNode } from "react";

type PopupProps = {
	isOpen?: boolean;
	onClose?: () => void;
	message?: string;
	description?: string;
	children?: ReactNode;
	autoWelcome?: boolean; // Nueva prop para habilitar bienvenida automÃ¡tica
};

function Popup({
	isOpen,
	onClose,
	message,
	description,
	children,
	autoWelcome = false,
}: PopupProps) {
	const [showWelcome, setShowWelcome] = useState(false);
	const [showExplanation, setShowExplanation] = useState(false);

	useEffect(() => {
		if (autoWelcome && !localStorage.getItem("hasVisited")) {
			localStorage.setItem("hasVisited", "true");
			setShowWelcome(true);
		}
	}, [autoWelcome]);

	const handleKnowsGame = () => setShowWelcome(false);
	const handleDoesNotKnowGame = () => {
		setShowWelcome(false);
		setShowExplanation(true);
	};

	// LÃ³gica para renderizar uno de los tres posibles popups
	const renderPopup = () => {
		if (showWelcome) {
			return (
				<BasePopup
					onClose={() => setShowWelcome(false)}
					message="Â¡Bienvenido al juego!"
					description="Â¿Ya conoces cÃ³mo se juega?"
				>
					<div className="flex justify-center gap-4 mt-4">
						<Button onClick={handleKnowsGame}>SÃ­</Button>
						<Button onClick={handleDoesNotKnowGame} inversed>
							No
						</Button>
					</div>
				</BasePopup>
			);
		}

		if (showExplanation) {
			return (
				<BasePopup
					onClose={() => setShowExplanation(false)}
					message="Â¿CÃ³mo se juega?"
					description="CÃ³digo Secreto es un juego por equipos donde
           un lÃ­der da pistas para que sus compaÃ±eros adivinen palabras ocultas. 
           El reto es evitar las palabras del rivalâ€¦ Â¡y sobre todo la palabra de color negro! ðŸ’£"
				>
					<div className="flex justify-center mt-4">
						<Button onClick={() => setShowExplanation(false)}>
							Â¡Entendido!
						</Button>
					</div>
				</BasePopup>
			);
		}

		if (isOpen) {
			return (
				<BasePopup
					onClose={onClose}
					message={message}
					description={description}
				>
					{children}
				</BasePopup>
			);
		}

		return null;
	};

	return renderPopup();
}

// Subcomponente reutilizable para estructura base del popup
function BasePopup({
	onClose,
	message,
	description,
	children,
}: {
	onClose?: () => void;
	message?: string;
	description?: string;
	children?: ReactNode;
}) {
	return (
		<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
			<div className="bg-cartas p-6 rounded shadow-lg max-w-sm w-full relative">
				{onClose && (
					<div className="absolute top-2 left-2">
						<Button onClick={onClose} inversed circular>
							<BackIcon />
						</Button>
					</div>
				)}
				{message && <p className="mb-4 mt-8 text-center text-2xl">{message}</p>}
				{description && (
					<p className="text-center text-sm text-black-300 mb-4">
						{description}
					</p>
				)}
				{children}
			</div>
		</div>
	);
}

export default Popup;
